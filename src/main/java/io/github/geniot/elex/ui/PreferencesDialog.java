package io.github.geniot.elex.ui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import io.github.geniot.elex.util.Logger;
import org.apache.commons.lang3.StringUtils;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.awt.event.*;

import static io.github.geniot.elex.ElexLauncher.setLAF;

public class PreferencesDialog extends JDialog {
    private JPanel contentPane;
    private JButton buttonOK;
    private JButton buttonCancel;
    private JPanel settingsPanel;
    private JTextField hostTextField;
    private JButton resetButton;
    private JLabel spacerLabel;
    private JComboBox themeComboBox;
    private JFrame frame;

    public PreferencesDialog(JFrame f) {
        this.frame = f;
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buttonOK);

        buttonOK.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onOK();
            }
        });

        buttonCancel.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        });

        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

        //host
        hostTextField.setBorder(BorderFactory.createCompoundBorder(
                hostTextField.getBorder(),
                BorderFactory.createEmptyBorder(0, 5, 0, 5)));
        hostTextField.getCaret().setBlinkRate(0);

        // Listen for changes in the text
        hostTextField.getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e) {
                save();
            }

            public void removeUpdate(DocumentEvent e) {
                save();
            }

            public void insertUpdate(DocumentEvent e) {
                save();
            }

            public void save() {
                try {
                    if (!StringUtils.isEmpty(hostTextField.getText())) {
                        String[] splits = hostTextField.getText().split(":");
                        ElexPreferences.put(ElexPreferences.Prop.HOST.name(), splits[0]);
                        ElexPreferences.putInt(ElexPreferences.Prop.PORT.name(), Integer.parseInt(splits[1]));
                    }
                } catch (Exception ex) {
                    Logger.getInstance().log(ex);
                }
            }
        });

        themeComboBox.setSelectedItem(ElexPreferences.get(ElexPreferences.Prop.LAF.name(), "Luna"));
        themeComboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String newLaf = themeComboBox.getSelectedItem().toString();
                ElexPreferences.put(ElexPreferences.Prop.LAF.name(), newLaf);
                setLAF(newLaf, frame);
            }
        });

        resetButton.addActionListener(e -> {
            try {
                ElexPreferences.put(ElexPreferences.Prop.HOST.name(), "localhost");
                ElexPreferences.putInt(ElexPreferences.Prop.PORT.name(), 8000);
                reset();
            } catch (Exception ioException) {
                Logger.getInstance().log(ioException);
            }
        });

        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        }, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
    }

    private void onOK() {
        // add your code here
        dispose();
    }

    private void onCancel() {
        // add your code here if necessary
        dispose();
    }

    private void reset() {
        String host = ElexPreferences.get(ElexPreferences.Prop.HOST.name(), "localhost");
        int port = ElexPreferences.getInt(ElexPreferences.Prop.PORT.name(), 8000);
        hostTextField.setText(host + ":" + port);
    }

    public static void main(String[] args) {
        PreferencesDialog dialog = new PreferencesDialog(null);
        dialog.pack();
        dialog.setVisible(true);
        System.exit(0);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1, true, false));
        panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonOK = new JButton();
        buttonOK.setText("OK");
        panel2.add(buttonOK, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonCancel = new JButton();
        buttonCancel.setText("Cancel");
        panel2.add(buttonCancel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        settingsPanel = new JPanel();
        settingsPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        panel3.add(settingsPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        settingsPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JLabel label1 = new JLabel();
        label1.setHorizontalAlignment(10);
        label1.setHorizontalTextPosition(10);
        label1.setText("Bind address: http://");
        settingsPanel.add(label1);
        hostTextField = new JTextField();
        settingsPanel.add(hostTextField);
        resetButton = new JButton();
        resetButton.setFocusPainted(false);
        resetButton.setFocusable(false);
        resetButton.setText("Reset");
        settingsPanel.add(resetButton);
        spacerLabel = new JLabel();
        spacerLabel.setMaximumSize(new Dimension(30, 0));
        spacerLabel.setMinimumSize(new Dimension(30, 0));
        spacerLabel.setPreferredSize(new Dimension(30, 0));
        spacerLabel.setText("");
        settingsPanel.add(spacerLabel);
        final JLabel label2 = new JLabel();
        label2.setText("Look-and-feel:");
        settingsPanel.add(label2);
        themeComboBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("Acryl");
        defaultComboBoxModel1.addElement("Aero");
        defaultComboBoxModel1.addElement("Aluminium");
        defaultComboBoxModel1.addElement("Bernstein");
        defaultComboBoxModel1.addElement("Fast");
        defaultComboBoxModel1.addElement("Graphite");
        defaultComboBoxModel1.addElement("HiFi");
        defaultComboBoxModel1.addElement("Luna");
        defaultComboBoxModel1.addElement("McWin");
        defaultComboBoxModel1.addElement("Mint");
        defaultComboBoxModel1.addElement("Noire");
        defaultComboBoxModel1.addElement("Smart");
        defaultComboBoxModel1.addElement("Texture");
        themeComboBox.setModel(defaultComboBoxModel1);
        settingsPanel.add(themeComboBox);
        final Spacer spacer2 = new Spacer();
        panel3.add(spacer2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        panel3.add(spacer3, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

}
